openapi: 3.0.0
info:
  title: Todo API
  description: A simple API for managing todos. <br> All requests are token protected expect the /login request. <br> Use this request to login new users and create token. <br> Once you have the token you can added it in the header for your request as Authorization {your_token} <br>
  version: 1.0.0

paths:
  auth/login:
    post:
      summary: Authenticate and obtain a token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: example@email.com
                password:
                  type: string
                  example: randompass
      responses:
        "200":
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImV4YW1wbGVAbWFpbC5jb20ifQ.XxxxXxxxXxxx"

  auth/users:
    post:
      summary: Get all registered users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                example: ["example@email.com"]

  /api/v1/todos:
    get:
      summary: Get all todos
      responses:
        "200":
          description: Successful retrieval of todos
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TodoList"
    post:
      summary: Create a new todo
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Todo"
      responses:
        "201":
          description: Successful creation of a new todo
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Todo"

  /api/v1/todos/{id}:
    get:
      summary: Get a specific todo by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: Successful retrieval of a todo
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Todo"
        "404":
          description: Todo not found
    put:
      summary: Update a todo by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Todo"
      responses:
        "200":
          description: Successful update of a todo
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Todo"
        "400":
          description: Bad request
    patch:
      summary: Update the 'completed' status of a todo by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                completed:
                  type: boolean
                  example: true
      responses:
        "200":
          description: Successful update of the 'completed' status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Todo"
        "400":
          description: Bad request
    delete:
      summary: Delete a todo by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: Successful deletion of a todo
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Todo"
        "404":
          description: Todo not found

components:
  schemas:
    Todo:
      type: object
      properties:
        title:
          type: string
          example: Learn Postman
        completed:
          type: boolean
          example: false

    TodoList:
      type: object
      properties:
        data:
          type: object
          properties:
            results:
              type: array
              items:
                $ref: "#/components/schemas/Todo"

securitySchemes:
  BearerAuth:
    type: http
    scheme: bearer
    bearerFormat: JWT
